/* Reset default margins and padding */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  height: 100%;
  overflow: hidden;
  background-color: #000; /* Set a background color if desired */
}

/* Make the video container full-screen and responsive */
.video-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

#background-video {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: auto;
  height: auto;
  min-width: 100%;
  min-height: 100%;
  object-fit: cover;
}


/* Pointer particles */
pointer-particles {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none; /* Allow clicks to pass through */
  z-index: 9999; /* Ensure it's above other elements */
}

/* Root variables */
:root {
  --tile-size: 0.7vmin;
  --distance: 1vmin;
}

/* Tiles container */
#tiles {
  position: absolute;
  top: calc(10% - 200px); /* Adjust as needed */
  left: 0;
  width: 100%;
  height: 80%; /* Adjust as needed */
  display: grid;
  place-items: center;
  cursor: pointer;
  z-index: 1; /* Ensure tiles are above the video */
}

/* Individual tiles */
#tiles > div {
  border-radius: 50%;
  width: var(--tile-size);
  aspect-ratio: 1;
  background: hsla(calc(var(--p-r) * (360 - 100) + 100), 100%, 60%, 0.8);
  position: absolute;
  transform: translate3d(var(--x), var(--y), 0) scale(var(--scale));
  animation: fade-in 0.3s linear forwards,
    show calc(var(--p-r2) * 10s) calc(var(--p-r) * 1s) cubic-bezier(0.86, 0.86, 0.41, 1.16) infinite,
    blink 1s calc(var(--p-r) * 1s) ease-in-out infinite;
}

/* Keyframes */
@keyframes blink {
  from,
  50%,
  to {
    opacity: 1;
  }
  30%,
  70% {
    opacity: 0.3;
  }
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes show {
  from {
    --x: calc(1dvw * var(--p-r));
    --y: calc(-100dvh * var(--p-r));
    filter: blur(0.5rem);
    --scale: calc(clamp(1.5, 10 * var(--p-r2), 5));
  }
  5% {
    filter: blur(0rem);
  }
  10% {
    --x: calc(var(--p-x) * var(--distance));
    --y: calc(var(--p-y) * var(--distance));
    --scale: calc(1);
  }
  to {
    --x: calc(var(--p-x) * var(--distance));
    --y: calc(var(--p-y) * var(--distance));
  }
}
